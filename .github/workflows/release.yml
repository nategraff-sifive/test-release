# Create a new release when a tag starting with `v` is pushed to the repository
on:
  push:
    tags:
      - 'v*' 

name: Create Release

env:
  PROJECT_NAME: test-release
  # Release is a prerelease if the tag contains RC or rc
  PRERELEASE: ${{ contains(github.ref, 'RC') || contains(github.ref, 'rc') }}

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: 'Fetch History'
        run: git fetch --prune --unshallow

      - name: 'Create Release Notes'
        uses: sifive/action-release-notes@a7b8169
        id: create-release-notes
        with:
          project-name: ${{ env.PROJECT_NAME }}
          release: ${{ github.ref }}

      - name: 'Create Release'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.PROJECT_NAME }} ${{ github.ref }}
          body: ${{ steps.create-release-notes.outputs.release-notes }}
          draft: false
          prerelease: ${{ env.PRERELEASE }} 

      - name: 'Tag Submodules for Release'
        run: |
          tag=$(echo ${{ github.ref }} | cut -d '/' -f 3)
          ./scripts/tag-submodules.sh ${tag}

      - name: 'Build Docker Image for Docs Build'
        run: |
          docker build -t docs-build -f doc/Dockerfile .

      - name: 'Clean Docs Output Folder'
        run: |
          cd doc/html
          git fetch
          git checkout master
          git reset --hard origin/master

      - name: 'Build Sphinx Documenattion'
        run: |
          tag=$(echo ${{ github.ref }} | cut -d '/' -f 3)
          docker run \
            --rm \
            -v $(pwd):/docs \
            -e RELEASE_TAG="${tag}" \
            docs-build \
            make -C doc clean xml html

      - name: 'Publish Documentation'
        run: |
          tag=$(echo ${{ github.ref }} | cut -d '/' -f 3)
          cd doc/html
          git config user.email "no-reply@sifive.com"
          git config user.name "actions-bot"
          git add .
          git commit -m "Documentation for ${{ env.PROJECT_NAME }} ${tag}"
          git push
